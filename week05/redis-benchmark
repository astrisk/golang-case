# redis-benchmark 测试

## 1. 使用 redis benchmark 工具, 测试 10 20 50 100 200 1k 5k 字节 value 大小，redis get set 性能

```sh
#!/bin/bash
## redis benchmark test runner

HOST=10.202.40.182
PORT=6379
THREADS=20
COUNTS=1000000
COMMANDS='set,get'
arrys=(10 20 50 100 200 1024 5000)

for size in ${arrys[@]}
do
	cat /dev/null > result.txt
	echo "begin to test, key size:"${size} >> result.txt
	redis-benchmark -h ${HOST} -p ${PORT} -t ${COMMANDS} -c ${THREADS}  -n ${COUNTS} -d ${size} -q >> result.txt
done

```

## redis-benchmark 测试结果




## 2. 写入一定量的 kv 数据, 根据数据大小 1w-50w 自己评估, 结合写入前后的 info memory 信息 , 分析上述不同 value 大小下，平均每个 key 的占用内存空间。

- redis 数据写入

```sh
redis-benchmark -h x.x.x.x -p 6379 -r 10000 -n 10000 -t set   -d 1024  -q
redis-benchmark -h x.x.x.x -p 6379 -r 10000 -n 10000 -t set   -d 2048  -q
redis-benchmark -h x.x.x.x -p 6379 -r 10000 -n 10000 -t set   -d 3096  -q
redis-benchmark -h x.x.x.x -p 6379 -r 10000 -n 10000 -t set   -d 4096  -q

```

- 内存统计数据

**每次测试前，会重启redis，恢复环境**

```
****************************************************

value size: 0

used_memory:595088
used_memory_human:581.14K
used_memory_rss:12783616
used_memory_rss_human:12.19M
used_memory_peak:595088
used_memory_peak_human:581.14K
used_memory_peak_perc:107.74%
used_memory_overhead:531360
used_memory_startup:531360
used_memory_dataset:63728
used_memory_dataset_perc:100.00%
total_system_memory:16808304640
total_system_memory_human:15.65G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:24.06
mem_fragmentation_bytes:12252256
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0

****************************************************
value size: 1024

used_memory:9193680
used_memory_human:8.77M
used_memory_rss:21258240
used_memory_rss_human:20.27M
used_memory_peak:12226288
used_memory_peak_human:11.66M
used_memory_peak_perc:75.20%
used_memory_overhead:850856
used_memory_startup:531360
used_memory_dataset:8342824
used_memory_dataset_perc:96.31%
total_system_memory:16808304640
total_system_memory_human:15.65G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:2.33
mem_fragmentation_bytes:12128272
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0

****************************************************
value size: 2048

used_memory:17304656
used_memory_human:16.50M
used_memory_rss:29626368
used_memory_rss_human:28.25M
used_memory_peak:20337648
used_memory_peak_human:19.40M
used_memory_peak_perc:85.09%
used_memory_overhead:850616
used_memory_startup:531360
used_memory_dataset:16454040
used_memory_dataset_perc:98.10%
total_system_memory:16808304640
total_system_memory_human:15.65G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:1.72
mem_fragmentation_bytes:12385424
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0

 ****************************************************
value size: 3072

used_memory:23690448
used_memory_human:22.59M
used_memory_rss:35811328
used_memory_rss_human:34.15M
used_memory_peak:26723128
used_memory_peak_human:25.49M
used_memory_peak_perc:88.65%
used_memory_overhead:849416
used_memory_startup:531360
used_memory_dataset:22841032
used_memory_dataset_perc:98.63%
total_system_memory:16808304640
total_system_memory_human:15.65G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:1.52
mem_fragmentation_bytes:12184592
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0


 ****************************************************
 value size: 4096
used_memory:33356112
used_memory_human:31.81M
used_memory_rss:45719552
used_memory_rss_human:43.60M
used_memory_peak:36388912
used_memory_peak_human:34.70M
used_memory_peak_perc:91.67%
used_memory_overhead:849176
used_memory_startup:531360
used_memory_dataset:32506936
used_memory_dataset_perc:99.03%
total_system_memory:16808304640
total_system_memory_human:15.65G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
maxmemory:0
maxmemory_human:0B
maxmemory_policy:noeviction
mem_fragmentation_ratio:1.37
mem_fragmentation_bytes:12427152
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0

```

- 数据分析

根据上面的统计数据，10000条数据内存汇总如下

|  序号 | 数据value大小  | redis内存占用  |
|---|---|---|
| 1  | 0  | 581.14K  |
| 2 | 1024  | 8.77M    |
| 3  | 2048   | 16.50M    |
| 4  | 3072   | 22.59M    |
| 5  | 4096  | 31.81M    |


```sh
根据内存分析，redis应该会对数据做一定的压缩，由于不是特别精确，可以采用1024和2048来进行分析key占用内存大小，具体思路如下

用y%来表示压缩比

(k+ 1024 * y%) * 10000条 = 8119999
(k+ 2048 * y%) * 10000条 = 15920000
k+ 1024 * y% = 811.9999
k+ 2048 * y% = 1592
1024 * y% = 778
y = 0.75

k+ 2048 * 0.75 = 1592
k = 1592-1536
k = 56
单位是byte1

```

从测试中看到的数据和分析的结果，在结合网上看到的些文章说对于string，redis没有做压缩，而且还会增加相关数据结构的metadata的数据，理论上内存占用比key+value本身的还要大，但是实际测试数据并非如此。
可能存在版本的差异。这里用的redis是6.2.6,这个可以深入了解下，或者看下对应代码
